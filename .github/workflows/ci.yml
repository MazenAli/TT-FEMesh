name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to PyPI'
        required: true
        default: false
        type: boolean

jobs:
  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Clean up Docker resources
      run: |
        docker system prune -af
        docker builder prune -af
    
    - name: Build and run tests with Docker Compose
      run: |
        export COMPOSE_BAKE=true
        # Build base image with buildx
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --load \
          -f docker/base.dockerfile \
          -t ttfemesh-base:latest \
          .
        
        # Build dev image with buildx
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --load \
          -f docker/dev.dockerfile \
          -t ttfemesh-dev:latest \
          .
        
        # Create a temporary directory for the repository
        mkdir -p /tmp/ttfemesh
        cp -r . /tmp/ttfemesh/
        
        # Run tests with the repository mounted
        docker run --rm \
          -v /tmp/ttfemesh:/app \
          -w /app \
          ttfemesh-dev:latest \
          make all
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: MazenAli/TT-FEMesh
        fail_ci_if_error: true
    
    - name: Clean up Docker resources after build
      if: always()
      run: |
        docker system prune -af
        docker builder prune -af

  python-compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v3
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libblas-dev liblapack-dev
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        pytest tests/

  publish:
    needs: [docker-test, python-compatibility]
    if: github.event.inputs.publish == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m build
        twine upload dist/* 